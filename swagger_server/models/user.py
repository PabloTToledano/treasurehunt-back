# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class User(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, user_id: int=None, username: str=None, email: str=None, rol: str=None):  # noqa: E501
        """User - a model defined in Swagger

        :param user_id: The user_id of this User.  # noqa: E501
        :type user_id: int
        :param username: The username of this User.  # noqa: E501
        :type username: str
        :param email: The email of this User.  # noqa: E501
        :type email: str
        :param rol: The rol of this User.  # noqa: E501
        :type rol: str
        """
        self.swagger_types = {
            'user_id': int,
            'username': str,
            'email': str,
            'rol': str
        }

        self.attribute_map = {
            'user_id': 'userId',
            'username': 'username',
            'email': 'email',
            'rol': 'rol'
        }

        self._user_id = user_id
        self._username = username
        self._email = email
        self._rol = rol

    @classmethod
    def from_dict(cls, dikt) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_id(self) -> int:
        """Gets the user_id of this User.


        :return: The user_id of this User.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: int):
        """Sets the user_id of this User.


        :param user_id: The user_id of this User.
        :type user_id: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def username(self) -> str:
        """Gets the username of this User.


        :return: The username of this User.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this User.


        :param username: The username of this User.
        :type username: str
        """

        self._username = username

    @property
    def email(self) -> str:
        """Gets the email of this User.


        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this User.


        :param email: The email of this User.
        :type email: str
        """

        self._email = email

    @property
    def rol(self) -> str:
        """Gets the rol of this User.


        :return: The rol of this User.
        :rtype: str
        """
        return self._rol

    @rol.setter
    def rol(self, rol: str):
        """Sets the rol of this User.


        :param rol: The rol of this User.
        :type rol: str
        """
        allowed_values = ["user", "admin", "jesucristo"]  # noqa: E501
        if rol not in allowed_values:
            raise ValueError(
                "Invalid value for `rol` ({0}), must be one of {1}"
                .format(rol, allowed_values)
            )

        self._rol = rol
