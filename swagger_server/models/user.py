# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class User(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, username: str=None, email: str=None, rol: str=None):  # noqa: E501
        """User - a model defined in Swagger

        :param id: The id of this User.  # noqa: E501
        :type id: int
        :param username: The username of this User.  # noqa: E501
        :type username: str
        :param email: The email of this User.  # noqa: E501
        :type email: str
        :param rol: The rol of this User.  # noqa: E501
        :type rol: str
        """
        self.swagger_types = {
            'id': int,
            'username': str,
            'email': str,
            'rol': str
        }

        self.attribute_map = {
            'id': '_id',
            'username': 'username',
            'email': 'email',
            'rol': 'rol'
        }

        self._id = id
        self._username = username
        self._email = email
        self._rol = rol

    @classmethod
    def from_dict(cls, dikt) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this User.


        :return: The id of this User.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this User.


        :param id: The id of this User.
        :type id: int
        """

        self._id = id

    @property
    def username(self) -> str:
        """Gets the username of this User.


        :return: The username of this User.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this User.


        :param username: The username of this User.
        :type username: str
        """

        self._username = username

    @property
    def email(self) -> str:
        """Gets the email of this User.


        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this User.


        :param email: The email of this User.
        :type email: str
        """

        self._email = email

    @property
    def rol(self) -> str:
        """Gets the rol of this User.


        :return: The rol of this User.
        :rtype: str
        """
        return self._rol

    @rol.setter
    def rol(self, rol: str):
        """Sets the rol of this User.


        :param rol: The rol of this User.
        :type rol: str
        """
        allowed_values = ["user", "admin", "jesucristo"]  # noqa: E501
        if rol not in allowed_values:
            raise ValueError(
                "Invalid value for `rol` ({0}), must be one of {1}"
                .format(rol, allowed_values)
            )

        self._rol = rol
